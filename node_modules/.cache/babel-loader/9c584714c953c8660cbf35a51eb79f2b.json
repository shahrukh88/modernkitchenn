{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\khan pc\\\\Desktop\\\\react-js-stickynav-main\\\\example\\\\src\\\\App.js\";\n\nimport React from 'react';\nimport StickyNav from 'react-js-stickynav';\nimport 'react-js-stickynav/dist/index.css';\n\nvar App = function App() {\n  var style = function style() {\n    return /*#__PURE__*/React.createElement(\"style\", {\n      jsx: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }, \"\\n        .nav {\\n          transition: all 0.1s linear;\\n          position: fixed;\\n          z-index: 2000;\\n          padding: 20px;\\n        }\\n        .scrollNav {\\n          transition: all 0.5s ease-in;\\n          z-index: 2000;\\n          background: #ffffff;\\n          width: 100%;\\n          border-bottom: 1px solid #dddddd;\\n        }\\n        .styl {\\n          padding-top: 80px;\\n        }\\n      \");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, style(), /*#__PURE__*/React.createElement(StickyNav, {\n    length: \"40\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"insert your Navbar Component here\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"styl\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Creating a Single-Page App in React using React Router by kirupa | filed under Learning React Now that you've familiarized yourself with the basics of how to work with React, let's kick things up a few notches. What we are going to do is use React to build a simple single-page app (also referred to as SPA by the cool kids...and people living in Scandinavia). Like we talked about in our React introduction forever ago, single-page apps are different from the more traditional multi-page apps that you see everywhere. The biggest difference is that navigating a single-page app doesn't involve going to an entirely new page. Instead, your pages (commonly known as views in this context) typically load inline within the same page itself: When you are loading content inline, things get a little challenging. The hard part is not loading the content itself. That is relatively easy. The hard part is making sure that single-page apps behave in a way that is consistent with what your users are used to. More specifically, when users navigate your app, they expect that: The URL displayed in the address bar always reflects the thing that they are viewing. They can use the browser's back and forward buttons...successfully. They can navigate to a particular view (aka deep link) directly using the appropriate URL. With multi-page apps, these three things come for free. There is nothing extra you have to do for any of it. With single-page apps, because you aren't navigating to an entirely new page, you have to do real work to deal with these three things that your users expect to just work. You need to ensure that navigating within your app adjusts the URL appropriately. You need to ensure your browser's history is properly synchronized with\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Creating a Single-Page App in React using React Router by kirupa | filed under Learning React Now that you've familiarized yourself with the basics of how to work with React, let's kick things up a few notches. What we are going to do is use React to build a simple single-page app (also referred to as SPA by the cool kids...and people living in Scandinavia). Like we talked about in our React introduction forever ago, single-page apps are different from the more traditional multi-page apps that you see everywhere. The biggest difference is that navigating a single-page app doesn't involve going to an entirely new page. Instead, your pages (commonly known as views in this context) typically load inline within the same page itself: When you are loading content inline, things get a little challenging. The hard part is not loading the content itself. That is relatively easy. The hard part is making sure that single-page apps behave in a way that is consistent with what your users are used to. More specifically, when users navigate your app, they expect that: The URL displayed in the address bar always reflects the thing that they are viewing. They can use the browser's back and forward buttons...successfully. They can navigate to a particular view (aka deep link) directly using the appropriate URL. With multi-page apps, these three things come for free. There is nothing extra you have to do for any of it. With single-page apps, because you aren't navigating to an entirely new page, you have to do real work to deal with these three things that your users expect to just work. You need to ensure that navigating within your app adjusts the URL appropriately. You need to ensure your browser's history is properly synchronized with\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/khan pc/Desktop/react-js-stickynav-main/example/src/App.js"],"names":["React","StickyNav","App","style"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,mCAAP;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,wBACE;AAAO,MAAA,GAAG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,waADF;AAoBD,GArBD;;AAsBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,EADR,eAEE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,eAGE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6tDADF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6tDA7BF,CAHF,CADF;AAgED,CAvFD;;AAyFA,eAAeD,GAAf","sourcesContent":["import React from 'react'\nimport StickyNav from 'react-js-stickynav'\nimport 'react-js-stickynav/dist/index.css'\n\nconst App = () => {\n  const style = () => {\n    return (\n      <style jsx>{`\n        .nav {\n          transition: all 0.1s linear;\n          position: fixed;\n          z-index: 2000;\n          padding: 20px;\n        }\n        .scrollNav {\n          transition: all 0.5s ease-in;\n          z-index: 2000;\n          background: #ffffff;\n          width: 100%;\n          border-bottom: 1px solid #dddddd;\n        }\n        .styl {\n          padding-top: 80px;\n        }\n      `}</style>\n    )\n  }\n  return (\n    <div>\n      {style()}\n      <StickyNav length='40'>insert your Navbar Component here</StickyNav>\n      <div className='styl'>\n        <h1>\n          Creating a Single-Page App in React using React Router by kirupa |\n          filed under Learning React Now that you've familiarized yourself with\n          the basics of how to work with React, let's kick things up a few\n          notches. What we are going to do is use React to build a simple\n          single-page app (also referred to as SPA by the cool kids...and people\n          living in Scandinavia). Like we talked about in our React introduction\n          forever ago, single-page apps are different from the more traditional\n          multi-page apps that you see everywhere. The biggest difference is\n          that navigating a single-page app doesn't involve going to an entirely\n          new page. Instead, your pages (commonly known as views in this\n          context) typically load inline within the same page itself: When you\n          are loading content inline, things get a little challenging. The hard\n          part is not loading the content itself. That is relatively easy. The\n          hard part is making sure that single-page apps behave in a way that is\n          consistent with what your users are used to. More specifically, when\n          users navigate your app, they expect that: The URL displayed in the\n          address bar always reflects the thing that they are viewing. They can\n          use the browser's back and forward buttons...successfully. They can\n          navigate to a particular view (aka deep link) directly using the\n          appropriate URL. With multi-page apps, these three things come for\n          free. There is nothing extra you have to do for any of it. With\n          single-page apps, because you aren't navigating to an entirely new\n          page, you have to do real work to deal with these three things that\n          your users expect to just work. You need to ensure that navigating\n          within your app adjusts the URL appropriately. You need to ensure your\n          browser's history is properly synchronized with\n        </h1>\n        <h5>\n          Creating a Single-Page App in React using React Router by kirupa |\n          filed under Learning React Now that you've familiarized yourself with\n          the basics of how to work with React, let's kick things up a few\n          notches. What we are going to do is use React to build a simple\n          single-page app (also referred to as SPA by the cool kids...and people\n          living in Scandinavia). Like we talked about in our React introduction\n          forever ago, single-page apps are different from the more traditional\n          multi-page apps that you see everywhere. The biggest difference is\n          that navigating a single-page app doesn't involve going to an entirely\n          new page. Instead, your pages (commonly known as views in this\n          context) typically load inline within the same page itself: When you\n          are loading content inline, things get a little challenging. The hard\n          part is not loading the content itself. That is relatively easy. The\n          hard part is making sure that single-page apps behave in a way that is\n          consistent with what your users are used to. More specifically, when\n          users navigate your app, they expect that: The URL displayed in the\n          address bar always reflects the thing that they are viewing. They can\n          use the browser's back and forward buttons...successfully. They can\n          navigate to a particular view (aka deep link) directly using the\n          appropriate URL. With multi-page apps, these three things come for\n          free. There is nothing extra you have to do for any of it. With\n          single-page apps, because you aren't navigating to an entirely new\n          page, you have to do real work to deal with these three things that\n          your users expect to just work. You need to ensure that navigating\n          within your app adjusts the URL appropriately. You need to ensure your\n          browser's history is properly synchronized with\n        </h5>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}